"""
1. Реализовать функцию, принимающую два числа (позиционные аргументы)
и выполняющую их деление. Числа запрашивать у пользователя,
предусмотреть обработку ситуации деления на ноль (try except).

Пример:
Введите первое число: 10
Введите второе число: 0
Вы что? Пытаетесь делить на 0!

Process finished with exit code 0

Пример:
Введите первое число: 10
Введите второе число: 10
1.0

Process finished with exit code 0
"""

def divide(x, y):
    try:
        result = x / y
        print(result)
    except ZeroDivisionError:
        print("вы что? пытаетесь делить на 0!")

x = int(input("введите первое число: "))
y = int(input("введите второе число: "))
divide(x, y)
print("process finished with exit code 0")

"""
2. Реализовать функцию, принимающую несколько параметров,
описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон.
Функция должна принимать параметры как именованные аргументы.
Реализовать вывод данных о пользователе одной строкой.

Пример:
Иван Иванов 1846 года рождения, проживает в городе Москва,
email: jackie@gmail.com, телефон: 01005321456
"""

def user_data(name, surname, birth_year, city, email, phone):
    print(f'{name} {surname} {birth_year} года рождения, проживает в городе {city}, email: {email}, телефон: {phone}')

user_data(name="Иван", surname="Иванов", birth_year=1846, city="Москва", email="jackie@gmail.com", phone="01005321456")

"""
3. Реализовать функцию my_func(), которая принимает три позиционных аргумента,
и возвращает сумму наибольших двух аргументов.
Попробуйте решить задачу двумя способами:
1) используя функцию sort()
2) без функции sort()
"""

# с помощью функции sort()

def my_func(x, y, z):
    nums = [x, y, z]
    nums.sort()
    return nums[1] + nums[2]

# без функции sort()

def my_func(x, y, z):
    if x > y and x > z:
        return x + max(y, z)
    elif y > z and y > x:
        return y + max(x, z)
    else:
        return z + max(x, y)
        
        
"""
4. Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо
выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y).
При решении задания необходимо обойтись без встроенной функции возведения числа в степень!
ВНИМАНИЕ: использование встроенной функции = задание не принято
"""

def my_func(x, y):
   res = 1
   for i in range(abs(y)):
     res *= x
   return 1/res if y < 0 else res

x = float(input('ведите положительное число: '))
y = int(input('Введите целое отрицательное число: '))
print(my_func(x, y))


"""
5. Сделайте профилирование кода любого или любых выполненных заданий
с помощью модуля timeit, опишите результат
"""

import timeit

def my_func(x, y):
   res = 1
   for i in range(abs(y)):
     res *= x
   return 1/res if y < 0 else res

x = float(input('ведите положительное число: '))
y = int(input('введите целое отрицательное число: '))

# профилирование с помощью модуля timeit
t = timeit.timeit('my_func(x, y)', setup='from __main__ import my_func, x, y', number=1000)

print(f'Время выполнения my_func 1000 раз: {t} секунд')
print(f'{x} в степени {y} = {my_func(x, y)}')

# Результат профилирования с помощью модуля timeit для функции my_func составляет t секунд при 1000 запусках кода.
